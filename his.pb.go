// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: his.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{0}
}

func (x *Request) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

type ServiceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hn       string `protobuf:"bytes,1,opt,name=hn,proto3" json:"hn,omitempty"`
	Hospcode string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
}

func (x *ServiceListRequest) Reset() {
	*x = ServiceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListRequest) ProtoMessage() {}

func (x *ServiceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListRequest.ProtoReflect.Descriptor instead.
func (*ServiceListRequest) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{1}
}

func (x *ServiceListRequest) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *ServiceListRequest) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

type VisitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vn       string `protobuf:"bytes,1,opt,name=vn,proto3" json:"vn,omitempty"`
	Hn       string `protobuf:"bytes,2,opt,name=hn,proto3" json:"hn,omitempty"`
	Hospcode string `protobuf:"bytes,3,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
}

func (x *VisitRequest) Reset() {
	*x = VisitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VisitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VisitRequest) ProtoMessage() {}

func (x *VisitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VisitRequest.ProtoReflect.Descriptor instead.
func (*VisitRequest) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{2}
}

func (x *VisitRequest) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *VisitRequest) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *VisitRequest) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

type DateserveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dateserve string `protobuf:"bytes,1,opt,name=dateserve,proto3" json:"dateserve,omitempty"`
	Hospcode  string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
}

func (x *DateserveRequest) Reset() {
	*x = DateserveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateserveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateserveRequest) ProtoMessage() {}

func (x *DateserveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateserveRequest.ProtoReflect.Descriptor instead.
func (*DateserveRequest) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{3}
}

func (x *DateserveRequest) GetDateserve() string {
	if x != nil {
		return x.Dateserve
	}
	return ""
}

func (x *DateserveRequest) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

type HospcodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
}

func (x *HospcodeRequest) Reset() {
	*x = HospcodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HospcodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HospcodeRequest) ProtoMessage() {}

func (x *HospcodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HospcodeRequest.ProtoReflect.Descriptor instead.
func (*HospcodeRequest) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{4}
}

func (x *HospcodeRequest) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

type TokenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{5}
}

func (x *TokenRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type ProviderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode  string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
}

func (x *ProviderRequest) Reset() {
	*x = ProviderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProviderRequest) ProtoMessage() {}

func (x *ProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProviderRequest.ProtoReflect.Descriptor instead.
func (*ProviderRequest) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{6}
}

func (x *ProviderRequest) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *ProviderRequest) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

type ListDoctorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListDoctorResponse_Doctor `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *ListDoctorResponse) Reset() {
	*x = ListDoctorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDoctorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDoctorResponse) ProtoMessage() {}

func (x *ListDoctorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDoctorResponse.ProtoReflect.Descriptor instead.
func (*ListDoctorResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{7}
}

func (x *ListDoctorResponse) GetResults() []*ListDoctorResponse_Doctor {
	if x != nil {
		return x.Results
	}
	return nil
}

type HisProviderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*HisProviderResponse_HisProvider `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *HisProviderResponse) Reset() {
	*x = HisProviderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HisProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HisProviderResponse) ProtoMessage() {}

func (x *HisProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HisProviderResponse.ProtoReflect.Descriptor instead.
func (*HisProviderResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{8}
}

func (x *HisProviderResponse) GetResults() []*HisProviderResponse_HisProvider {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListClinicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ListClinicResponse_Clinic `protobuf:"bytes,2,rep,name=Results,proto3" json:"Results,omitempty"`
}

func (x *ListClinicResponse) Reset() {
	*x = ListClinicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicResponse) ProtoMessage() {}

func (x *ListClinicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicResponse.ProtoReflect.Descriptor instead.
func (*ListClinicResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{9}
}

func (x *ListClinicResponse) GetResults() []*ListClinicResponse_Clinic {
	if x != nil {
		return x.Results
	}
	return nil
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*InfoResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{10}
}

func (x *InfoResponse) GetResults() []*InfoResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type OPDDrugResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OPDDrugResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *OPDDrugResponse) Reset() {
	*x = OPDDrugResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDDrugResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDDrugResponse) ProtoMessage() {}

func (x *OPDDrugResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDDrugResponse.ProtoReflect.Descriptor instead.
func (*OPDDrugResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{11}
}

func (x *OPDDrugResponse) GetResults() []*OPDDrugResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type LabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*LabResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *LabResponse) Reset() {
	*x = LabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabResponse) ProtoMessage() {}

func (x *LabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabResponse.ProtoReflect.Descriptor instead.
func (*LabResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{12}
}

func (x *LabResponse) GetResults() []*LabResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type OPDDiagResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OPDDiagResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *OPDDiagResponse) Reset() {
	*x = OPDDiagResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDDiagResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDDiagResponse) ProtoMessage() {}

func (x *OPDDiagResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDDiagResponse.ProtoReflect.Descriptor instead.
func (*OPDDiagResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{13}
}

func (x *OPDDiagResponse) GetResults() []*OPDDiagResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type OPDProcedureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OPDProcedureResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *OPDProcedureResponse) Reset() {
	*x = OPDProcedureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDProcedureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDProcedureResponse) ProtoMessage() {}

func (x *OPDProcedureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDProcedureResponse.ProtoReflect.Descriptor instead.
func (*OPDProcedureResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{14}
}

func (x *OPDProcedureResponse) GetResults() []*OPDProcedureResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type OPDScreenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*OPDScreenResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *OPDScreenResponse) Reset() {
	*x = OPDScreenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDScreenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDScreenResponse) ProtoMessage() {}

func (x *OPDScreenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDScreenResponse.ProtoReflect.Descriptor instead.
func (*OPDScreenResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{15}
}

func (x *OPDScreenResponse) GetResults() []*OPDScreenResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type ServiceListResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ServiceListResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ServiceListResponse) Reset() {
	*x = ServiceListResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListResponse) ProtoMessage() {}

func (x *ServiceListResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListResponse.ProtoReflect.Descriptor instead.
func (*ServiceListResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{16}
}

func (x *ServiceListResponse) GetResults() []*ServiceListResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type AppointmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AppointmentResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *AppointmentResponse) Reset() {
	*x = AppointmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentResponse) ProtoMessage() {}

func (x *AppointmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentResponse.ProtoReflect.Descriptor instead.
func (*AppointmentResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{17}
}

func (x *AppointmentResponse) GetResults() []*AppointmentResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type AppointmentDateserveResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*AppointmentDateserveResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *AppointmentDateserveResponse) Reset() {
	*x = AppointmentDateserveResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentDateserveResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentDateserveResponse) ProtoMessage() {}

func (x *AppointmentDateserveResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentDateserveResponse.ProtoReflect.Descriptor instead.
func (*AppointmentDateserveResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{18}
}

func (x *AppointmentDateserveResponse) GetResults() []*AppointmentDateserveResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type ReferOutResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*ReferOutResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ReferOutResponse) Reset() {
	*x = ReferOutResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferOutResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferOutResponse) ProtoMessage() {}

func (x *ReferOutResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferOutResponse.ProtoReflect.Descriptor instead.
func (*ReferOutResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{19}
}

func (x *ReferOutResponse) GetResults() []*ReferOutResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type TokenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*TokenResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *TokenResponse) Reset() {
	*x = TokenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse) ProtoMessage() {}

func (x *TokenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse.ProtoReflect.Descriptor instead.
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{20}
}

func (x *TokenResponse) GetResults() []*TokenResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*CountResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{21}
}

func (x *CountResponse) GetResults() []*CountResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type H4UPersonalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*H4UPersonalResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *H4UPersonalResponse) Reset() {
	*x = H4UPersonalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UPersonalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UPersonalResponse) ProtoMessage() {}

func (x *H4UPersonalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UPersonalResponse.ProtoReflect.Descriptor instead.
func (*H4UPersonalResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{22}
}

func (x *H4UPersonalResponse) GetResults() []*H4UPersonalResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type H4UVisitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*H4UVisitResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *H4UVisitResponse) Reset() {
	*x = H4UVisitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UVisitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UVisitResponse) ProtoMessage() {}

func (x *H4UVisitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UVisitResponse.ProtoReflect.Descriptor instead.
func (*H4UVisitResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{23}
}

func (x *H4UVisitResponse) GetResults() []*H4UVisitResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type H4ULabResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*H4ULabResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *H4ULabResponse) Reset() {
	*x = H4ULabResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4ULabResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4ULabResponse) ProtoMessage() {}

func (x *H4ULabResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4ULabResponse.ProtoReflect.Descriptor instead.
func (*H4ULabResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{24}
}

func (x *H4ULabResponse) GetResults() []*H4ULabResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type H4UOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*H4UOrderResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *H4UOrderResponse) Reset() {
	*x = H4UOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UOrderResponse) ProtoMessage() {}

func (x *H4UOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UOrderResponse.ProtoReflect.Descriptor instead.
func (*H4UOrderResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{25}
}

func (x *H4UOrderResponse) GetResults() []*H4UOrderResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type H4UDiagnosisResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Results []*H4UDiagnosisResponse_Results `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *H4UDiagnosisResponse) Reset() {
	*x = H4UDiagnosisResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UDiagnosisResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UDiagnosisResponse) ProtoMessage() {}

func (x *H4UDiagnosisResponse) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UDiagnosisResponse.ProtoReflect.Descriptor instead.
func (*H4UDiagnosisResponse) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{26}
}

func (x *H4UDiagnosisResponse) GetResults() []*H4UDiagnosisResponse_Results {
	if x != nil {
		return x.Results
	}
	return nil
}

type ListDoctorResponse_Doctor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid      string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Hospcode  string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	LicenseNo string `protobuf:"bytes,4,opt,name=license_no,json=licenseNo,proto3" json:"license_no,omitempty"`
	Cid       string `protobuf:"bytes,5,opt,name=cid,proto3" json:"cid,omitempty"`
	Code      string `protobuf:"bytes,6,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *ListDoctorResponse_Doctor) Reset() {
	*x = ListDoctorResponse_Doctor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListDoctorResponse_Doctor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDoctorResponse_Doctor) ProtoMessage() {}

func (x *ListDoctorResponse_Doctor) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDoctorResponse_Doctor.ProtoReflect.Descriptor instead.
func (*ListDoctorResponse_Doctor) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{7, 0}
}

func (x *ListDoctorResponse_Doctor) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListDoctorResponse_Doctor) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *ListDoctorResponse_Doctor) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListDoctorResponse_Doctor) GetLicenseNo() string {
	if x != nil {
		return x.LicenseNo
	}
	return ""
}

func (x *ListDoctorResponse_Doctor) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *ListDoctorResponse_Doctor) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

type HisProviderResponse_HisProvider struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderName string `protobuf:"bytes,1,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	Hospcode     string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
}

func (x *HisProviderResponse_HisProvider) Reset() {
	*x = HisProviderResponse_HisProvider{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HisProviderResponse_HisProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HisProviderResponse_HisProvider) ProtoMessage() {}

func (x *HisProviderResponse_HisProvider) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HisProviderResponse_HisProvider.ProtoReflect.Descriptor instead.
func (*HisProviderResponse_HisProvider) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{8, 0}
}

func (x *HisProviderResponse_HisProvider) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *HisProviderResponse_HisProvider) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

type ListClinicResponse_Clinic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Txid       string `protobuf:"bytes,1,opt,name=txid,proto3" json:"txid,omitempty"`
	Hospcode   string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	ClinicCode string `protobuf:"bytes,3,opt,name=clinic_code,json=clinicCode,proto3" json:"clinic_code,omitempty"`
	ClinicName string `protobuf:"bytes,4,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
}

func (x *ListClinicResponse_Clinic) Reset() {
	*x = ListClinicResponse_Clinic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListClinicResponse_Clinic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClinicResponse_Clinic) ProtoMessage() {}

func (x *ListClinicResponse_Clinic) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClinicResponse_Clinic.ProtoReflect.Descriptor instead.
func (*ListClinicResponse_Clinic) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListClinicResponse_Clinic) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ListClinicResponse_Clinic) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *ListClinicResponse_Clinic) GetClinicCode() string {
	if x != nil {
		return x.ClinicCode
	}
	return ""
}

func (x *ListClinicResponse_Clinic) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

type InfoResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode     string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hospname     string `protobuf:"bytes,2,opt,name=hospname,proto3" json:"hospname,omitempty"`
	TitleName    string `protobuf:"bytes,3,opt,name=title_name,json=titleName,proto3" json:"title_name,omitempty"`
	FirstName    string `protobuf:"bytes,4,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName     string `protobuf:"bytes,5,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Birthdate    string `protobuf:"bytes,6,opt,name=birthdate,proto3" json:"birthdate,omitempty"`
	Sex          string `protobuf:"bytes,7,opt,name=sex,proto3" json:"sex,omitempty"`
	Cid          string `protobuf:"bytes,8,opt,name=cid,proto3" json:"cid,omitempty"`
	Hn           string `protobuf:"bytes,9,opt,name=hn,proto3" json:"hn,omitempty"`
	ContactTel   string `protobuf:"bytes,10,opt,name=contact_tel,json=contactTel,proto3" json:"contact_tel,omitempty"`
	ContactName  string `protobuf:"bytes,11,opt,name=contact_name,json=contactName,proto3" json:"contact_name,omitempty"`
	ProviderName string `protobuf:"bytes,12,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider  string `protobuf:"bytes,13,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid         string `protobuf:"bytes,14,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *InfoResponse_Results) Reset() {
	*x = InfoResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse_Results) ProtoMessage() {}

func (x *InfoResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse_Results.ProtoReflect.Descriptor instead.
func (*InfoResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{10, 0}
}

func (x *InfoResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *InfoResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *InfoResponse_Results) GetTitleName() string {
	if x != nil {
		return x.TitleName
	}
	return ""
}

func (x *InfoResponse_Results) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *InfoResponse_Results) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *InfoResponse_Results) GetBirthdate() string {
	if x != nil {
		return x.Birthdate
	}
	return ""
}

func (x *InfoResponse_Results) GetSex() string {
	if x != nil {
		return x.Sex
	}
	return ""
}

func (x *InfoResponse_Results) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *InfoResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *InfoResponse_Results) GetContactTel() string {
	if x != nil {
		return x.ContactTel
	}
	return ""
}

func (x *InfoResponse_Results) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *InfoResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *InfoResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *InfoResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type OPDDrugResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode      string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hospname      string `protobuf:"bytes,2,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hn            string `protobuf:"bytes,3,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn            string `protobuf:"bytes,4,opt,name=vn,proto3" json:"vn,omitempty"`
	DrugCode      string `protobuf:"bytes,5,opt,name=drug_code,json=drugCode,proto3" json:"drug_code,omitempty"`
	DrugName      string `protobuf:"bytes,6,opt,name=drug_name,json=drugName,proto3" json:"drug_name,omitempty"`
	Qty           string `protobuf:"bytes,7,opt,name=qty,proto3" json:"qty,omitempty"`
	Usage1        string `protobuf:"bytes,8,opt,name=usage1,proto3" json:"usage1,omitempty"`
	Usage2        string `protobuf:"bytes,9,opt,name=usage2,proto3" json:"usage2,omitempty"`
	Usage3        string `protobuf:"bytes,10,opt,name=usage3,proto3" json:"usage3,omitempty"`
	DrugshortName string `protobuf:"bytes,11,opt,name=drugshort_name,json=drugshortName,proto3" json:"drugshort_name,omitempty"`
	ProviderName  string `protobuf:"bytes,12,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider   string `protobuf:"bytes,13,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid          string `protobuf:"bytes,14,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *OPDDrugResponse_Results) Reset() {
	*x = OPDDrugResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDDrugResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDDrugResponse_Results) ProtoMessage() {}

func (x *OPDDrugResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDDrugResponse_Results.ProtoReflect.Descriptor instead.
func (*OPDDrugResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{11, 0}
}

func (x *OPDDrugResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetDrugCode() string {
	if x != nil {
		return x.DrugCode
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetDrugName() string {
	if x != nil {
		return x.DrugName
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetQty() string {
	if x != nil {
		return x.Qty
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetUsage1() string {
	if x != nil {
		return x.Usage1
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetUsage2() string {
	if x != nil {
		return x.Usage2
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetUsage3() string {
	if x != nil {
		return x.Usage3
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetDrugshortName() string {
	if x != nil {
		return x.DrugshortName
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *OPDDrugResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type LabResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode       string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hospname       string `protobuf:"bytes,2,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hn             string `protobuf:"bytes,3,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn             string `protobuf:"bytes,4,opt,name=vn,proto3" json:"vn,omitempty"`
	LabOrderNumber string `protobuf:"bytes,5,opt,name=lab_order_number,json=labOrderNumber,proto3" json:"lab_order_number,omitempty"`
	LabGroupName   string `protobuf:"bytes,6,opt,name=lab_group_name,json=labGroupName,proto3" json:"lab_group_name,omitempty"`
	LabName        string `protobuf:"bytes,7,opt,name=lab_name,json=labName,proto3" json:"lab_name,omitempty"`
	LabResult      string `protobuf:"bytes,8,opt,name=lab_result,json=labResult,proto3" json:"lab_result,omitempty"`
	NormalValue    string `protobuf:"bytes,9,opt,name=normal_value,json=normalValue,proto3" json:"normal_value,omitempty"`
	ProviderName   string `protobuf:"bytes,10,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider    string `protobuf:"bytes,11,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid           string `protobuf:"bytes,12,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *LabResponse_Results) Reset() {
	*x = LabResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LabResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LabResponse_Results) ProtoMessage() {}

func (x *LabResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LabResponse_Results.ProtoReflect.Descriptor instead.
func (*LabResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{12, 0}
}

func (x *LabResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *LabResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *LabResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *LabResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *LabResponse_Results) GetLabOrderNumber() string {
	if x != nil {
		return x.LabOrderNumber
	}
	return ""
}

func (x *LabResponse_Results) GetLabGroupName() string {
	if x != nil {
		return x.LabGroupName
	}
	return ""
}

func (x *LabResponse_Results) GetLabName() string {
	if x != nil {
		return x.LabName
	}
	return ""
}

func (x *LabResponse_Results) GetLabResult() string {
	if x != nil {
		return x.LabResult
	}
	return ""
}

func (x *LabResponse_Results) GetNormalValue() string {
	if x != nil {
		return x.NormalValue
	}
	return ""
}

func (x *LabResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *LabResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *LabResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type OPDDiagResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode        string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hospname        string `protobuf:"bytes,2,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hn              string `protobuf:"bytes,3,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn              string `protobuf:"bytes,4,opt,name=vn,proto3" json:"vn,omitempty"`
	DiagnosisCode   string `protobuf:"bytes,5,opt,name=diagnosis_code,json=diagnosisCode,proto3" json:"diagnosis_code,omitempty"`
	DiagnosisEnName string `protobuf:"bytes,6,opt,name=diagnosis_en_name,json=diagnosisEnName,proto3" json:"diagnosis_en_name,omitempty"`
	DiagnosisThName string `protobuf:"bytes,7,opt,name=diagnosis_th_name,json=diagnosisThName,proto3" json:"diagnosis_th_name,omitempty"`
	DiagnosisType   string `protobuf:"bytes,8,opt,name=diagnosis_type,json=diagnosisType,proto3" json:"diagnosis_type,omitempty"`
	DiagnosisText   string `protobuf:"bytes,9,opt,name=diagnosis_text,json=diagnosisText,proto3" json:"diagnosis_text,omitempty"`
	ProviderName    string `protobuf:"bytes,10,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider     string `protobuf:"bytes,11,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid            string `protobuf:"bytes,12,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *OPDDiagResponse_Results) Reset() {
	*x = OPDDiagResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDDiagResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDDiagResponse_Results) ProtoMessage() {}

func (x *OPDDiagResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDDiagResponse_Results.ProtoReflect.Descriptor instead.
func (*OPDDiagResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{13, 0}
}

func (x *OPDDiagResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetDiagnosisCode() string {
	if x != nil {
		return x.DiagnosisCode
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetDiagnosisEnName() string {
	if x != nil {
		return x.DiagnosisEnName
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetDiagnosisThName() string {
	if x != nil {
		return x.DiagnosisThName
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetDiagnosisType() string {
	if x != nil {
		return x.DiagnosisType
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetDiagnosisText() string {
	if x != nil {
		return x.DiagnosisText
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *OPDDiagResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type OPDProcedureResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode        string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hospname        string `protobuf:"bytes,2,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hn              string `protobuf:"bytes,3,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn              string `protobuf:"bytes,4,opt,name=vn,proto3" json:"vn,omitempty"`
	DiagnosisCode   string `protobuf:"bytes,5,opt,name=diagnosis_code,json=diagnosisCode,proto3" json:"diagnosis_code,omitempty"`
	DiagnosisThName string `protobuf:"bytes,6,opt,name=diagnosis_th_name,json=diagnosisThName,proto3" json:"diagnosis_th_name,omitempty"`
	DiagnosisEnName string `protobuf:"bytes,14,opt,name=diagnosis_en_name,json=diagnosisEnName,proto3" json:"diagnosis_en_name,omitempty"`
	StartDate       string `protobuf:"bytes,7,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	StartTime       string `protobuf:"bytes,8,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	FinishDate      string `protobuf:"bytes,9,opt,name=finish_date,json=finishDate,proto3" json:"finish_date,omitempty"`
	FinishTime      string `protobuf:"bytes,10,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	ProviderName    string `protobuf:"bytes,11,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider     string `protobuf:"bytes,12,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid            string `protobuf:"bytes,13,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *OPDProcedureResponse_Results) Reset() {
	*x = OPDProcedureResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDProcedureResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDProcedureResponse_Results) ProtoMessage() {}

func (x *OPDProcedureResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDProcedureResponse_Results.ProtoReflect.Descriptor instead.
func (*OPDProcedureResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{14, 0}
}

func (x *OPDProcedureResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetDiagnosisCode() string {
	if x != nil {
		return x.DiagnosisCode
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetDiagnosisThName() string {
	if x != nil {
		return x.DiagnosisThName
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetDiagnosisEnName() string {
	if x != nil {
		return x.DiagnosisEnName
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetFinishDate() string {
	if x != nil {
		return x.FinishDate
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *OPDProcedureResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type OPDScreenResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode        string  `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hospname        string  `protobuf:"bytes,2,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hn              string  `protobuf:"bytes,3,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn              string  `protobuf:"bytes,4,opt,name=vn,proto3" json:"vn,omitempty"`
	Bpd             float32 `protobuf:"fixed32,5,opt,name=bpd,proto3" json:"bpd,omitempty"`
	Bps             float32 `protobuf:"fixed32,6,opt,name=bps,proto3" json:"bps,omitempty"`
	Weight          float32 `protobuf:"fixed32,7,opt,name=weight,proto3" json:"weight,omitempty"`
	Height          float32 `protobuf:"fixed32,8,opt,name=height,proto3" json:"height,omitempty"`
	Waist           float32 `protobuf:"fixed32,9,opt,name=waist,proto3" json:"waist,omitempty"`
	Bmi             float32 `protobuf:"fixed32,10,opt,name=bmi,proto3" json:"bmi,omitempty"`
	ChiefComplain   string  `protobuf:"bytes,11,opt,name=chief_complain,json=chiefComplain,proto3" json:"chief_complain,omitempty"`
	HearthRate      float32 `protobuf:"fixed32,12,opt,name=hearth_rate,json=hearthRate,proto3" json:"hearth_rate,omitempty"`
	Pe              string  `protobuf:"bytes,13,opt,name=pe,proto3" json:"pe,omitempty"`
	PulseRate       int32   `protobuf:"varint,14,opt,name=pulse_rate,json=pulseRate,proto3" json:"pulse_rate,omitempty"`
	Temperature     float32 `protobuf:"fixed32,15,opt,name=temperature,proto3" json:"temperature,omitempty"`
	RespiratoryRate int32   `protobuf:"varint,16,opt,name=respiratory_rate,json=respiratoryRate,proto3" json:"respiratory_rate,omitempty"`
	Hpi             string  `protobuf:"bytes,17,opt,name=hpi,proto3" json:"hpi,omitempty"`
	ProviderName    string  `protobuf:"bytes,18,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider     string  `protobuf:"bytes,19,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid            string  `protobuf:"bytes,20,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *OPDScreenResponse_Results) Reset() {
	*x = OPDScreenResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OPDScreenResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OPDScreenResponse_Results) ProtoMessage() {}

func (x *OPDScreenResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OPDScreenResponse_Results.ProtoReflect.Descriptor instead.
func (*OPDScreenResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{15, 0}
}

func (x *OPDScreenResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetBpd() float32 {
	if x != nil {
		return x.Bpd
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetBps() float32 {
	if x != nil {
		return x.Bps
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetWeight() float32 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetHeight() float32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetWaist() float32 {
	if x != nil {
		return x.Waist
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetBmi() float32 {
	if x != nil {
		return x.Bmi
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetChiefComplain() string {
	if x != nil {
		return x.ChiefComplain
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetHearthRate() float32 {
	if x != nil {
		return x.HearthRate
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetPe() string {
	if x != nil {
		return x.Pe
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetPulseRate() int32 {
	if x != nil {
		return x.PulseRate
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetTemperature() float32 {
	if x != nil {
		return x.Temperature
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetRespiratoryRate() int32 {
	if x != nil {
		return x.RespiratoryRate
	}
	return 0
}

func (x *OPDScreenResponse_Results) GetHpi() string {
	if x != nil {
		return x.Hpi
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *OPDScreenResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type ServiceListResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospcode       string `protobuf:"bytes,1,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hospname       string `protobuf:"bytes,2,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hn             string `protobuf:"bytes,3,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn             string `protobuf:"bytes,4,opt,name=vn,proto3" json:"vn,omitempty"`
	VisitDate      string `protobuf:"bytes,5,opt,name=visit_date,json=visitDate,proto3" json:"visit_date,omitempty"`
	VisitTime      string `protobuf:"bytes,6,opt,name=visit_time,json=visitTime,proto3" json:"visit_time,omitempty"`
	MainDepartment string `protobuf:"bytes,7,opt,name=main_department,json=mainDepartment,proto3" json:"main_department,omitempty"`
	SubDepartment  string `protobuf:"bytes,8,opt,name=sub_department,json=subDepartment,proto3" json:"sub_department,omitempty"`
	Pttype         string `protobuf:"bytes,9,opt,name=pttype,proto3" json:"pttype,omitempty"`
	PttypeNo       string `protobuf:"bytes,10,opt,name=pttype_no,json=pttypeNo,proto3" json:"pttype_no,omitempty"`
	An             string `protobuf:"bytes,11,opt,name=an,proto3" json:"an,omitempty"`
	DiagnosisCode  string `protobuf:"bytes,12,opt,name=diagnosis_code,json=diagnosisCode,proto3" json:"diagnosis_code,omitempty"`
	DiagnosisName  string `protobuf:"bytes,13,opt,name=diagnosis_name,json=diagnosisName,proto3" json:"diagnosis_name,omitempty"`
	VisitRefer     string `protobuf:"bytes,14,opt,name=visit_refer,json=visitRefer,proto3" json:"visit_refer,omitempty"`
	ProviderName   string `protobuf:"bytes,15,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider    string `protobuf:"bytes,16,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid           string `protobuf:"bytes,17,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *ServiceListResponse_Results) Reset() {
	*x = ServiceListResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceListResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceListResponse_Results) ProtoMessage() {}

func (x *ServiceListResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceListResponse_Results.ProtoReflect.Descriptor instead.
func (*ServiceListResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{16, 0}
}

func (x *ServiceListResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *ServiceListResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *ServiceListResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *ServiceListResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *ServiceListResponse_Results) GetVisitDate() string {
	if x != nil {
		return x.VisitDate
	}
	return ""
}

func (x *ServiceListResponse_Results) GetVisitTime() string {
	if x != nil {
		return x.VisitTime
	}
	return ""
}

func (x *ServiceListResponse_Results) GetMainDepartment() string {
	if x != nil {
		return x.MainDepartment
	}
	return ""
}

func (x *ServiceListResponse_Results) GetSubDepartment() string {
	if x != nil {
		return x.SubDepartment
	}
	return ""
}

func (x *ServiceListResponse_Results) GetPttype() string {
	if x != nil {
		return x.Pttype
	}
	return ""
}

func (x *ServiceListResponse_Results) GetPttypeNo() string {
	if x != nil {
		return x.PttypeNo
	}
	return ""
}

func (x *ServiceListResponse_Results) GetAn() string {
	if x != nil {
		return x.An
	}
	return ""
}

func (x *ServiceListResponse_Results) GetDiagnosisCode() string {
	if x != nil {
		return x.DiagnosisCode
	}
	return ""
}

func (x *ServiceListResponse_Results) GetDiagnosisName() string {
	if x != nil {
		return x.DiagnosisName
	}
	return ""
}

func (x *ServiceListResponse_Results) GetVisitRefer() string {
	if x != nil {
		return x.VisitRefer
	}
	return ""
}

func (x *ServiceListResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *ServiceListResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *ServiceListResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type AppointmentResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospname        string `protobuf:"bytes,1,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hospcode        string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	VisitDate       string `protobuf:"bytes,3,opt,name=visit_date,json=visitDate,proto3" json:"visit_date,omitempty"`
	Hn              string `protobuf:"bytes,4,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn              string `protobuf:"bytes,5,opt,name=vn,proto3" json:"vn,omitempty"`
	AppointmentDate string `protobuf:"bytes,6,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date,omitempty"`
	AppointmentTime string `protobuf:"bytes,7,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time,omitempty"`
	Cause           string `protobuf:"bytes,8,opt,name=cause,proto3" json:"cause,omitempty"`
	ContactPoint    string `protobuf:"bytes,9,opt,name=contact_point,json=contactPoint,proto3" json:"contact_point,omitempty"`
	Note            string `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	ProviderName    string `protobuf:"bytes,11,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider     string `protobuf:"bytes,12,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid            string `protobuf:"bytes,13,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *AppointmentResponse_Results) Reset() {
	*x = AppointmentResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentResponse_Results) ProtoMessage() {}

func (x *AppointmentResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentResponse_Results.ProtoReflect.Descriptor instead.
func (*AppointmentResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{17, 0}
}

func (x *AppointmentResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *AppointmentResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *AppointmentResponse_Results) GetVisitDate() string {
	if x != nil {
		return x.VisitDate
	}
	return ""
}

func (x *AppointmentResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *AppointmentResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *AppointmentResponse_Results) GetAppointmentDate() string {
	if x != nil {
		return x.AppointmentDate
	}
	return ""
}

func (x *AppointmentResponse_Results) GetAppointmentTime() string {
	if x != nil {
		return x.AppointmentTime
	}
	return ""
}

func (x *AppointmentResponse_Results) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *AppointmentResponse_Results) GetContactPoint() string {
	if x != nil {
		return x.ContactPoint
	}
	return ""
}

func (x *AppointmentResponse_Results) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AppointmentResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *AppointmentResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *AppointmentResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type AppointmentDateserveResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospname        string `protobuf:"bytes,1,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hospcode        string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	VisitDate       string `protobuf:"bytes,3,opt,name=visit_date,json=visitDate,proto3" json:"visit_date,omitempty"`
	Hn              string `protobuf:"bytes,4,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn              string `protobuf:"bytes,5,opt,name=vn,proto3" json:"vn,omitempty"`
	AppointmentDate string `protobuf:"bytes,6,opt,name=appointment_date,json=appointmentDate,proto3" json:"appointment_date,omitempty"`
	AppointmentTime string `protobuf:"bytes,7,opt,name=appointment_time,json=appointmentTime,proto3" json:"appointment_time,omitempty"`
	Cause           string `protobuf:"bytes,8,opt,name=cause,proto3" json:"cause,omitempty"`
	ContactPoint    string `protobuf:"bytes,9,opt,name=contact_point,json=contactPoint,proto3" json:"contact_point,omitempty"`
	Note            string `protobuf:"bytes,10,opt,name=note,proto3" json:"note,omitempty"`
	TitleName       string `protobuf:"bytes,11,opt,name=title_name,json=titleName,proto3" json:"title_name,omitempty"`
	FirstName       string `protobuf:"bytes,12,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName        string `protobuf:"bytes,13,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Cid             string `protobuf:"bytes,14,opt,name=cid,proto3" json:"cid,omitempty"`
	Doctor          string `protobuf:"bytes,15,opt,name=doctor,proto3" json:"doctor,omitempty"`
	ClinicCode      string `protobuf:"bytes,16,opt,name=clinic_code,json=clinicCode,proto3" json:"clinic_code,omitempty"`
	ClinicName      string `protobuf:"bytes,17,opt,name=clinic_name,json=clinicName,proto3" json:"clinic_name,omitempty"`
	DepartmentCode  string `protobuf:"bytes,18,opt,name=department_code,json=departmentCode,proto3" json:"department_code,omitempty"`
	DepartmentName  string `protobuf:"bytes,19,opt,name=department_name,json=departmentName,proto3" json:"department_name,omitempty"`
	Telephone       string `protobuf:"bytes,20,opt,name=telephone,proto3" json:"telephone,omitempty"`
	ProviderName    string `protobuf:"bytes,21,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider     string `protobuf:"bytes,22,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid            string `protobuf:"bytes,23,opt,name=txid,proto3" json:"txid,omitempty"`
}

func (x *AppointmentDateserveResponse_Results) Reset() {
	*x = AppointmentDateserveResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentDateserveResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentDateserveResponse_Results) ProtoMessage() {}

func (x *AppointmentDateserveResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentDateserveResponse_Results.ProtoReflect.Descriptor instead.
func (*AppointmentDateserveResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{18, 0}
}

func (x *AppointmentDateserveResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetVisitDate() string {
	if x != nil {
		return x.VisitDate
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetAppointmentDate() string {
	if x != nil {
		return x.AppointmentDate
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetAppointmentTime() string {
	if x != nil {
		return x.AppointmentTime
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetCause() string {
	if x != nil {
		return x.Cause
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetContactPoint() string {
	if x != nil {
		return x.ContactPoint
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetTitleName() string {
	if x != nil {
		return x.TitleName
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetDoctor() string {
	if x != nil {
		return x.Doctor
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetClinicCode() string {
	if x != nil {
		return x.ClinicCode
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetClinicName() string {
	if x != nil {
		return x.ClinicName
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetDepartmentCode() string {
	if x != nil {
		return x.DepartmentCode
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetDepartmentName() string {
	if x != nil {
		return x.DepartmentName
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *AppointmentDateserveResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

type ReferOutResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hospname       string `protobuf:"bytes,1,opt,name=hospname,proto3" json:"hospname,omitempty"`
	Hospcode       string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Hn             string `protobuf:"bytes,3,opt,name=hn,proto3" json:"hn,omitempty"`
	Vn             string `protobuf:"bytes,4,opt,name=vn,proto3" json:"vn,omitempty"`
	ReferPoint     string `protobuf:"bytes,5,opt,name=refer_point,json=referPoint,proto3" json:"refer_point,omitempty"`
	ReferDate      string `protobuf:"bytes,6,opt,name=refer_date,json=referDate,proto3" json:"refer_date,omitempty"`
	ReferTime      string `protobuf:"bytes,7,opt,name=refer_time,json=referTime,proto3" json:"refer_time,omitempty"`
	Pttype         string `protobuf:"bytes,8,opt,name=pttype,proto3" json:"pttype,omitempty"`
	PttypeNo       string `protobuf:"bytes,9,opt,name=pttype_no,json=pttypeNo,proto3" json:"pttype_no,omitempty"`
	DiagnosisCode  string `protobuf:"bytes,10,opt,name=diagnosis_code,json=diagnosisCode,proto3" json:"diagnosis_code,omitempty"`
	DiagnosisName  string `protobuf:"bytes,11,opt,name=diagnosis_name,json=diagnosisName,proto3" json:"diagnosis_name,omitempty"`
	Treatment      string `protobuf:"bytes,12,opt,name=treatment,proto3" json:"treatment,omitempty"`
	ReferHospcode  string `protobuf:"bytes,13,opt,name=refer_hospcode,json=referHospcode,proto3" json:"refer_hospcode,omitempty"`
	ReferHospname  string `protobuf:"bytes,14,opt,name=refer_hospname,json=referHospname,proto3" json:"refer_hospname,omitempty"`
	MainDepartment string `protobuf:"bytes,15,opt,name=main_department,json=mainDepartment,proto3" json:"main_department,omitempty"`
	SubDepartment  string `protobuf:"bytes,16,opt,name=sub_department,json=subDepartment,proto3" json:"sub_department,omitempty"`
	ReferNumber    string `protobuf:"bytes,17,opt,name=refer_number,json=referNumber,proto3" json:"refer_number,omitempty"`
	ReferType      string `protobuf:"bytes,18,opt,name=refer_type,json=referType,proto3" json:"refer_type,omitempty"`
	ReferCause     string `protobuf:"bytes,19,opt,name=refer_cause,json=referCause,proto3" json:"refer_cause,omitempty"`
	ProviderName   string `protobuf:"bytes,20,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider    string `protobuf:"bytes,21,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
	Txid           string `protobuf:"bytes,22,opt,name=txid,proto3" json:"txid,omitempty"`
	ExpireDate     string `protobuf:"bytes,23,opt,name=expire_date,json=expireDate,proto3" json:"expire_date,omitempty"`
}

func (x *ReferOutResponse_Results) Reset() {
	*x = ReferOutResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReferOutResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReferOutResponse_Results) ProtoMessage() {}

func (x *ReferOutResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReferOutResponse_Results.ProtoReflect.Descriptor instead.
func (*ReferOutResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{19, 0}
}

func (x *ReferOutResponse_Results) GetHospname() string {
	if x != nil {
		return x.Hospname
	}
	return ""
}

func (x *ReferOutResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *ReferOutResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *ReferOutResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferPoint() string {
	if x != nil {
		return x.ReferPoint
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferDate() string {
	if x != nil {
		return x.ReferDate
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferTime() string {
	if x != nil {
		return x.ReferTime
	}
	return ""
}

func (x *ReferOutResponse_Results) GetPttype() string {
	if x != nil {
		return x.Pttype
	}
	return ""
}

func (x *ReferOutResponse_Results) GetPttypeNo() string {
	if x != nil {
		return x.PttypeNo
	}
	return ""
}

func (x *ReferOutResponse_Results) GetDiagnosisCode() string {
	if x != nil {
		return x.DiagnosisCode
	}
	return ""
}

func (x *ReferOutResponse_Results) GetDiagnosisName() string {
	if x != nil {
		return x.DiagnosisName
	}
	return ""
}

func (x *ReferOutResponse_Results) GetTreatment() string {
	if x != nil {
		return x.Treatment
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferHospcode() string {
	if x != nil {
		return x.ReferHospcode
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferHospname() string {
	if x != nil {
		return x.ReferHospname
	}
	return ""
}

func (x *ReferOutResponse_Results) GetMainDepartment() string {
	if x != nil {
		return x.MainDepartment
	}
	return ""
}

func (x *ReferOutResponse_Results) GetSubDepartment() string {
	if x != nil {
		return x.SubDepartment
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferNumber() string {
	if x != nil {
		return x.ReferNumber
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferType() string {
	if x != nil {
		return x.ReferType
	}
	return ""
}

func (x *ReferOutResponse_Results) GetReferCause() string {
	if x != nil {
		return x.ReferCause
	}
	return ""
}

func (x *ReferOutResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *ReferOutResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

func (x *ReferOutResponse_Results) GetTxid() string {
	if x != nil {
		return x.Txid
	}
	return ""
}

func (x *ReferOutResponse_Results) GetExpireDate() string {
	if x != nil {
		return x.ExpireDate
	}
	return ""
}

type TokenResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId       string `protobuf:"bytes,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	IsActived   string `protobuf:"bytes,2,opt,name=is_actived,json=isActived,proto3" json:"is_actived,omitempty"`
	ExpiredDate string `protobuf:"bytes,3,opt,name=expired_date,json=expiredDate,proto3" json:"expired_date,omitempty"`
}

func (x *TokenResponse_Results) Reset() {
	*x = TokenResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TokenResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenResponse_Results) ProtoMessage() {}

func (x *TokenResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenResponse_Results.ProtoReflect.Descriptor instead.
func (*TokenResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TokenResponse_Results) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *TokenResponse_Results) GetIsActived() string {
	if x != nil {
		return x.IsActived
	}
	return ""
}

func (x *TokenResponse_Results) GetExpiredDate() string {
	if x != nil {
		return x.ExpiredDate
	}
	return ""
}

type CountResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    string `protobuf:"bytes,1,opt,name=count,proto3" json:"count,omitempty"`
	Hospcode string `protobuf:"bytes,2,opt,name=hospcode,proto3" json:"hospcode,omitempty"`
	Table    string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *CountResponse_Results) Reset() {
	*x = CountResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse_Results) ProtoMessage() {}

func (x *CountResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse_Results.ProtoReflect.Descriptor instead.
func (*CountResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{21, 0}
}

func (x *CountResponse_Results) GetCount() string {
	if x != nil {
		return x.Count
	}
	return ""
}

func (x *CountResponse_Results) GetHospcode() string {
	if x != nil {
		return x.Hospcode
	}
	return ""
}

func (x *CountResponse_Results) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type H4UPersonalResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid          string `protobuf:"bytes,1,opt,name=cid,proto3" json:"cid,omitempty"`
	Hn           string `protobuf:"bytes,2,opt,name=hn,proto3" json:"hn,omitempty"`
	Pname        string `protobuf:"bytes,3,opt,name=pname,proto3" json:"pname,omitempty"`
	Fname        string `protobuf:"bytes,4,opt,name=fname,proto3" json:"fname,omitempty"`
	Lname        string `protobuf:"bytes,5,opt,name=lname,proto3" json:"lname,omitempty"`
	Birthday     string `protobuf:"bytes,6,opt,name=birthday,proto3" json:"birthday,omitempty"`
	Addressid    string `protobuf:"bytes,7,opt,name=addressid,proto3" json:"addressid,omitempty"`
	Addrpart     string `protobuf:"bytes,8,opt,name=addrpart,proto3" json:"addrpart,omitempty"`
	Moopart      string `protobuf:"bytes,9,opt,name=moopart,proto3" json:"moopart,omitempty"`
	Tmbpart      string `protobuf:"bytes,10,opt,name=tmbpart,proto3" json:"tmbpart,omitempty"`
	Amppart      string `protobuf:"bytes,11,opt,name=amppart,proto3" json:"amppart,omitempty"`
	Chwpart      string `protobuf:"bytes,12,opt,name=chwpart,proto3" json:"chwpart,omitempty"`
	FullName     string `protobuf:"bytes,13,opt,name=full_name,json=fullName,proto3" json:"full_name,omitempty"`
	Drugallergy  string `protobuf:"bytes,14,opt,name=drugallergy,proto3" json:"drugallergy,omitempty"`
	AgeY         string `protobuf:"bytes,15,opt,name=age_y,json=ageY,proto3" json:"age_y,omitempty"`
	Bloodgrp     string `protobuf:"bytes,16,opt,name=bloodgrp,proto3" json:"bloodgrp,omitempty"`
	Hometel      string `protobuf:"bytes,17,opt,name=hometel,proto3" json:"hometel,omitempty"`
	Nationality  string `protobuf:"bytes,18,opt,name=nationality,proto3" json:"nationality,omitempty"`
	Road         string `protobuf:"bytes,19,opt,name=road,proto3" json:"road,omitempty"`
	PoCode       string `protobuf:"bytes,20,opt,name=po_code,json=poCode,proto3" json:"po_code,omitempty"`
	AddrSoi      string `protobuf:"bytes,21,opt,name=addr_soi,json=addrSoi,proto3" json:"addr_soi,omitempty"`
	ProviderName string `protobuf:"bytes,22,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider  string `protobuf:"bytes,23,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
}

func (x *H4UPersonalResponse_Results) Reset() {
	*x = H4UPersonalResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UPersonalResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UPersonalResponse_Results) ProtoMessage() {}

func (x *H4UPersonalResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UPersonalResponse_Results.ProtoReflect.Descriptor instead.
func (*H4UPersonalResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{22, 0}
}

func (x *H4UPersonalResponse_Results) GetCid() string {
	if x != nil {
		return x.Cid
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetPname() string {
	if x != nil {
		return x.Pname
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetFname() string {
	if x != nil {
		return x.Fname
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetLname() string {
	if x != nil {
		return x.Lname
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetAddressid() string {
	if x != nil {
		return x.Addressid
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetAddrpart() string {
	if x != nil {
		return x.Addrpart
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetMoopart() string {
	if x != nil {
		return x.Moopart
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetTmbpart() string {
	if x != nil {
		return x.Tmbpart
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetAmppart() string {
	if x != nil {
		return x.Amppart
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetChwpart() string {
	if x != nil {
		return x.Chwpart
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetDrugallergy() string {
	if x != nil {
		return x.Drugallergy
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetAgeY() string {
	if x != nil {
		return x.AgeY
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetBloodgrp() string {
	if x != nil {
		return x.Bloodgrp
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetHometel() string {
	if x != nil {
		return x.Hometel
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetRoad() string {
	if x != nil {
		return x.Road
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetPoCode() string {
	if x != nil {
		return x.PoCode
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetAddrSoi() string {
	if x != nil {
		return x.AddrSoi
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *H4UPersonalResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

type H4UVisitResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vstdate      string `protobuf:"bytes,1,opt,name=vstdate,proto3" json:"vstdate,omitempty"`
	Vsttime      string `protobuf:"bytes,2,opt,name=vsttime,proto3" json:"vsttime,omitempty"`
	Bmi          string `protobuf:"bytes,3,opt,name=bmi,proto3" json:"bmi,omitempty"`
	Bw           string `protobuf:"bytes,4,opt,name=bw,proto3" json:"bw,omitempty"`
	O2Sat        string `protobuf:"bytes,5,opt,name=o2sat,proto3" json:"o2sat,omitempty"`
	Temperature  string `protobuf:"bytes,6,opt,name=temperature,proto3" json:"temperature,omitempty"`
	Rr           string `protobuf:"bytes,7,opt,name=rr,proto3" json:"rr,omitempty"`
	Cc           string `protobuf:"bytes,8,opt,name=cc,proto3" json:"cc,omitempty"`
	Pe           string `protobuf:"bytes,9,opt,name=pe,proto3" json:"pe,omitempty"`
	Height       string `protobuf:"bytes,10,opt,name=height,proto3" json:"height,omitempty"`
	Bps          string `protobuf:"bytes,11,opt,name=bps,proto3" json:"bps,omitempty"`
	Bpd          string `protobuf:"bytes,12,opt,name=bpd,proto3" json:"bpd,omitempty"`
	Hpi          string `protobuf:"bytes,13,opt,name=hpi,proto3" json:"hpi,omitempty"`
	Pulse        string `protobuf:"bytes,14,opt,name=pulse,proto3" json:"pulse,omitempty"`
	ProviderName string `protobuf:"bytes,15,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider  string `protobuf:"bytes,16,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
}

func (x *H4UVisitResponse_Results) Reset() {
	*x = H4UVisitResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UVisitResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UVisitResponse_Results) ProtoMessage() {}

func (x *H4UVisitResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UVisitResponse_Results.ProtoReflect.Descriptor instead.
func (*H4UVisitResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{23, 0}
}

func (x *H4UVisitResponse_Results) GetVstdate() string {
	if x != nil {
		return x.Vstdate
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetVsttime() string {
	if x != nil {
		return x.Vsttime
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetBmi() string {
	if x != nil {
		return x.Bmi
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetBw() string {
	if x != nil {
		return x.Bw
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetO2Sat() string {
	if x != nil {
		return x.O2Sat
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetTemperature() string {
	if x != nil {
		return x.Temperature
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetRr() string {
	if x != nil {
		return x.Rr
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetCc() string {
	if x != nil {
		return x.Cc
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetPe() string {
	if x != nil {
		return x.Pe
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetBps() string {
	if x != nil {
		return x.Bps
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetBpd() string {
	if x != nil {
		return x.Bpd
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetHpi() string {
	if x != nil {
		return x.Hpi
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetPulse() string {
	if x != nil {
		return x.Pulse
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *H4UVisitResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

type H4ULabResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lab                    string `protobuf:"bytes,1,opt,name=lab,proto3" json:"lab,omitempty"`
	Name                   string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OrderDate              string `protobuf:"bytes,3,opt,name=order_date,json=orderDate,proto3" json:"order_date,omitempty"`
	OrderTime              string `protobuf:"bytes,4,opt,name=order_time,json=orderTime,proto3" json:"order_time,omitempty"`
	LabOrderNumber         string `protobuf:"bytes,5,opt,name=lab_order_number,json=labOrderNumber,proto3" json:"lab_order_number,omitempty"`
	Vn                     string `protobuf:"bytes,6,opt,name=vn,proto3" json:"vn,omitempty"`
	Hn                     string `protobuf:"bytes,7,opt,name=hn,proto3" json:"hn,omitempty"`
	LabItemsNameRef        string `protobuf:"bytes,8,opt,name=lab_items_name_ref,json=labItemsNameRef,proto3" json:"lab_items_name_ref,omitempty"`
	LabItemsCode           string `protobuf:"bytes,9,opt,name=lab_items_code,json=labItemsCode,proto3" json:"lab_items_code,omitempty"`
	LabOrderResult         string `protobuf:"bytes,10,opt,name=lab_order_result,json=labOrderResult,proto3" json:"lab_order_result,omitempty"`
	LabItemsNormalValueRef string `protobuf:"bytes,11,opt,name=lab_items_normal_value_ref,json=labItemsNormalValueRef,proto3" json:"lab_items_normal_value_ref,omitempty"`
	LabItemsName           string `protobuf:"bytes,12,opt,name=lab_items_name,json=labItemsName,proto3" json:"lab_items_name,omitempty"`
	ComfirmReport          string `protobuf:"bytes,13,opt,name=comfirm_report,json=comfirmReport,proto3" json:"comfirm_report,omitempty"`
	ProviderName           string `protobuf:"bytes,14,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider            string `protobuf:"bytes,15,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
}

func (x *H4ULabResponse_Results) Reset() {
	*x = H4ULabResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4ULabResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4ULabResponse_Results) ProtoMessage() {}

func (x *H4ULabResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4ULabResponse_Results.ProtoReflect.Descriptor instead.
func (*H4ULabResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{24, 0}
}

func (x *H4ULabResponse_Results) GetLab() string {
	if x != nil {
		return x.Lab
	}
	return ""
}

func (x *H4ULabResponse_Results) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *H4ULabResponse_Results) GetOrderDate() string {
	if x != nil {
		return x.OrderDate
	}
	return ""
}

func (x *H4ULabResponse_Results) GetOrderTime() string {
	if x != nil {
		return x.OrderTime
	}
	return ""
}

func (x *H4ULabResponse_Results) GetLabOrderNumber() string {
	if x != nil {
		return x.LabOrderNumber
	}
	return ""
}

func (x *H4ULabResponse_Results) GetVn() string {
	if x != nil {
		return x.Vn
	}
	return ""
}

func (x *H4ULabResponse_Results) GetHn() string {
	if x != nil {
		return x.Hn
	}
	return ""
}

func (x *H4ULabResponse_Results) GetLabItemsNameRef() string {
	if x != nil {
		return x.LabItemsNameRef
	}
	return ""
}

func (x *H4ULabResponse_Results) GetLabItemsCode() string {
	if x != nil {
		return x.LabItemsCode
	}
	return ""
}

func (x *H4ULabResponse_Results) GetLabOrderResult() string {
	if x != nil {
		return x.LabOrderResult
	}
	return ""
}

func (x *H4ULabResponse_Results) GetLabItemsNormalValueRef() string {
	if x != nil {
		return x.LabItemsNormalValueRef
	}
	return ""
}

func (x *H4ULabResponse_Results) GetLabItemsName() string {
	if x != nil {
		return x.LabItemsName
	}
	return ""
}

func (x *H4ULabResponse_Results) GetComfirmReport() string {
	if x != nil {
		return x.ComfirmReport
	}
	return ""
}

func (x *H4ULabResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *H4ULabResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

type H4UOrderResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Drug         string `protobuf:"bytes,1,opt,name=drug,proto3" json:"drug,omitempty"`
	Vstdate      string `protobuf:"bytes,2,opt,name=vstdate,proto3" json:"vstdate,omitempty"`
	Vsttime      string `protobuf:"bytes,3,opt,name=vsttime,proto3" json:"vsttime,omitempty"`
	ProviderName string `protobuf:"bytes,4,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider  string `protobuf:"bytes,5,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
}

func (x *H4UOrderResponse_Results) Reset() {
	*x = H4UOrderResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UOrderResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UOrderResponse_Results) ProtoMessage() {}

func (x *H4UOrderResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UOrderResponse_Results.ProtoReflect.Descriptor instead.
func (*H4UOrderResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{25, 0}
}

func (x *H4UOrderResponse_Results) GetDrug() string {
	if x != nil {
		return x.Drug
	}
	return ""
}

func (x *H4UOrderResponse_Results) GetVstdate() string {
	if x != nil {
		return x.Vstdate
	}
	return ""
}

func (x *H4UOrderResponse_Results) GetVsttime() string {
	if x != nil {
		return x.Vsttime
	}
	return ""
}

func (x *H4UOrderResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *H4UOrderResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

type H4UDiagnosisResponse_Results struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Diag         string `protobuf:"bytes,1,opt,name=diag,proto3" json:"diag,omitempty"`
	Vstdate      string `protobuf:"bytes,2,opt,name=vstdate,proto3" json:"vstdate,omitempty"`
	Vsttime      string `protobuf:"bytes,3,opt,name=vsttime,proto3" json:"vsttime,omitempty"`
	ProviderName string `protobuf:"bytes,4,opt,name=provider_name,json=providerName,proto3" json:"provider_name,omitempty"`
	HisProvider  string `protobuf:"bytes,5,opt,name=his_provider,json=hisProvider,proto3" json:"his_provider,omitempty"`
}

func (x *H4UDiagnosisResponse_Results) Reset() {
	*x = H4UDiagnosisResponse_Results{}
	if protoimpl.UnsafeEnabled {
		mi := &file_his_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *H4UDiagnosisResponse_Results) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*H4UDiagnosisResponse_Results) ProtoMessage() {}

func (x *H4UDiagnosisResponse_Results) ProtoReflect() protoreflect.Message {
	mi := &file_his_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use H4UDiagnosisResponse_Results.ProtoReflect.Descriptor instead.
func (*H4UDiagnosisResponse_Results) Descriptor() ([]byte, []int) {
	return file_his_proto_rawDescGZIP(), []int{26, 0}
}

func (x *H4UDiagnosisResponse_Results) GetDiag() string {
	if x != nil {
		return x.Diag
	}
	return ""
}

func (x *H4UDiagnosisResponse_Results) GetVstdate() string {
	if x != nil {
		return x.Vstdate
	}
	return ""
}

func (x *H4UDiagnosisResponse_Results) GetVsttime() string {
	if x != nil {
		return x.Vsttime
	}
	return ""
}

func (x *H4UDiagnosisResponse_Results) GetProviderName() string {
	if x != nil {
		return x.ProviderName
	}
	return ""
}

func (x *H4UDiagnosisResponse_Results) GetHisProvider() string {
	if x != nil {
		return x.HisProvider
	}
	return ""
}

var File_his_proto protoreflect.FileDescriptor

var file_his_proto_rawDesc = []byte{
	0x0a, 0x09, 0x68, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x1b, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x22,
	0x40, 0x0a, 0x12, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0x4a, 0x0a, 0x0c, 0x56, 0x69, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x4c, 0x0a,
	0x10, 0x44, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x2d, 0x0a, 0x0f, 0x48,
	0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4c, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xe4,
	0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x91, 0x01, 0x0a, 0x06, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4e, 0x6f, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x13, 0x48, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a,
	0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x69, 0x73, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0x4e, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x23,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xcc, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x1a, 0x7a, 0x0a, 0x06, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd6,
	0x03, 0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x35, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x8e, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x73, 0x65, 0x78, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0xc6, 0x03, 0x0a, 0x0f, 0x4f, 0x50, 0x44, 0x44,
	0x72, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x50, 0x44, 0x44, 0x72, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xf8, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x75,
	0x67, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72,
	0x75, 0x67, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x72, 0x75, 0x67, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x72, 0x75, 0x67, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x71, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x71, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x31, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x61, 0x67, 0x65, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x33, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x61, 0x67, 0x65, 0x33, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x72, 0x75, 0x67, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x72, 0x75, 0x67, 0x73, 0x68, 0x6f, 0x72, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73,
	0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x78, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64,
	0x22, 0xb0, 0x03, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x34, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xea, 0x02, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61,
	0x62, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6c, 0x61,
	0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x61,
	0x62, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x62, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x62, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x22, 0xd8, 0x03, 0x0a, 0x0f, 0x4f, 0x50, 0x44, 0x44, 0x69, 0x61, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x50, 0x44, 0x44, 0x69, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0x8a, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x45, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x67,
	0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x54, 0x68,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69,
	0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64,
	0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x54, 0x65,
	0x78, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0x94,
	0x04, 0x0a, 0x14, 0x4f, 0x50, 0x44, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x50, 0x44, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xbc, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x74,
	0x68, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69,
	0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x54, 0x68, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a,
	0x11, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x45, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0xe1, 0x04, 0x0a, 0x11, 0x4f, 0x50, 0x44, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x50, 0x44, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x8f, 0x04, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x70, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x70, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x62, 0x70, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x61, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x77, 0x61, 0x69, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6d, 0x69, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x62, 0x6d, 0x69, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x68, 0x69, 0x65, 0x66,
	0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x68, 0x69, 0x65, 0x66, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x1f,
	0x0a, 0x0b, 0x68, 0x65, 0x61, 0x72, 0x74, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0a, 0x68, 0x65, 0x61, 0x72, 0x74, 0x68, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x73, 0x70, 0x69, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x70,
	0x69, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x68,
	0x70, 0x69, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x68, 0x70, 0x69, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0xd5, 0x04, 0x0a, 0x13, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a,
	0xff, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x76, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e,
	0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75,
	0x62, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x61, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x73, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x78, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69,
	0x64, 0x22, 0xd7, 0x03, 0x0a, 0x13, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x81, 0x03, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76,
	0x69, 0x73, 0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x76, 0x69, 0x73, 0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78, 0x69, 0x64, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0xa0, 0x06, 0x0a, 0x1c,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x45, 0x0a, 0x07,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x1a, 0xb8, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69, 0x73,
	0x69, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70,
	0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68,
	0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x78,
	0x69, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x22, 0xaf,
	0x06, 0x0a, 0x10, 0x52, 0x65, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xdf,
	0x05, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f,
	0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x70, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x76, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x74, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x74,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x48, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x70, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x69, 0x6e, 0x44,
	0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x75, 0x62,
	0x5f, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72, 0x5f, 0x63, 0x61, 0x75, 0x73,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x43, 0x61,
	0x75, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x78, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x69, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x22, 0xab, 0x01, 0x0a, 0x0d, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x62, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x22, 0x9a,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x36, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x51, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73,
	0x70, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xbd, 0x05, 0x0a, 0x13,
	0x48, 0x34, 0x55, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55,
	0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x1a, 0xe7, 0x04, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12,
	0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x70, 0x61, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x70, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6f, 0x70, 0x61,
	0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x6f, 0x6f, 0x70, 0x61, 0x72,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x6d, 0x62, 0x70, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x6d, 0x62, 0x70, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x6d, 0x70, 0x70, 0x61, 0x72, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6d,
	0x70, 0x70, 0x61, 0x72, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x77, 0x70, 0x61, 0x72, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x77, 0x70, 0x61, 0x72, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x72, 0x75, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x72, 0x75, 0x67, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x67, 0x79, 0x12, 0x13,
	0x0a, 0x05, 0x61, 0x67, 0x65, 0x5f, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61,
	0x67, 0x65, 0x59, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x67, 0x72, 0x70, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x67, 0x72, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x68, 0x6f, 0x6d, 0x65, 0x74, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72,
	0x6f, 0x61, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x61, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x6f, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72,
	0x5f, 0x73, 0x6f, 0x69, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x53, 0x6f, 0x69, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f,
	0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xc3, 0x03, 0x0a, 0x10,
	0x48, 0x34, 0x55, 0x56, 0x69, 0x73, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55, 0x56, 0x69, 0x73,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0xf3, 0x02, 0x0a, 0x07,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x73, 0x74, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x73, 0x74, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x76, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x6d, 0x69, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x6d, 0x69, 0x12, 0x0e, 0x0a,
	0x02, 0x62, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x62, 0x77, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x32, 0x73, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x32,
	0x73, 0x61, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x72, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x63, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x62, 0x70, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x70, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x62, 0x70, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x62, 0x70,
	0x64, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x70, 0x69, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x68, 0x70, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x75, 0x6c, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0xd1, 0x04, 0x0a, 0x0e, 0x48, 0x34, 0x55, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34,
	0x55, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x85, 0x04,
	0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x61, 0x62, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x6c, 0x61, 0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x62, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x76, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x76, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x68, 0x6e, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x61, 0x62, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x61, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61,
	0x62, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6c, 0x61,
	0x62, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6c, 0x61, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x1a, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72,
	0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x6c, 0x61, 0x62, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x61, 0x62, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x62, 0x49, 0x74, 0x65,
	0x6d, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x66, 0x69, 0x72,
	0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x6d, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0xe9, 0x01, 0x0a, 0x10, 0x48, 0x34, 0x55, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x72, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x72, 0x75, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x73, 0x74, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x22, 0xf1, 0x01, 0x0a, 0x14, 0x48, 0x34, 0x55, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x52, 0x07, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x1a, 0x99, 0x01, 0x0a, 0x07, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x61, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x73, 0x74,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x73, 0x74, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x73, 0x74, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x69, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x69, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x32, 0xae, 0x04, 0x0a, 0x0a, 0x45, 0x6d, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0b, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0c, 0x4f, 0x50, 0x44, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x69,
	0x6e, 0x67, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x50, 0x44, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0c, 0x4f, 0x50, 0x44, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f,
	0x73, 0x69, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4f, 0x50, 0x44, 0x44, 0x69, 0x61, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x42, 0x0a, 0x0c, 0x4f, 0x50, 0x44, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75,
	0x72, 0x65, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4f, 0x50, 0x44, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x07, 0x4f, 0x50, 0x44, 0x44, 0x72, 0x75,
	0x67, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x50, 0x44, 0x44, 0x72, 0x75, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x30, 0x0a, 0x03, 0x4c, 0x61, 0x62, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x69, 0x73, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x61, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x08, 0x52, 0x65, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x12, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x68, 0x0a, 0x0e, 0x4d, 0x68, 0x65, 0x61, 0x6c, 0x74,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x9d, 0x02, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x41, 0x0a, 0x0a, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x6f, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x70,
	0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x69, 0x6e, 0x69, 0x63, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x48, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x6f, 0x73, 0x70, 0x63, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x69, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x32, 0x46, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x35, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x12, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x9f, 0x02, 0x0a, 0x0a, 0x48, 0x34, 0x55,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x48, 0x34, 0x55, 0x50, 0x65,
	0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x34, 0x55, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x48, 0x34, 0x55, 0x56, 0x69, 0x73, 0x69, 0x74, 0x12, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55, 0x56, 0x69, 0x73, 0x69, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x48, 0x34, 0x55, 0x4c, 0x61,
	0x62, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55, 0x4c, 0x61, 0x62,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x48, 0x34, 0x55, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x48, 0x34, 0x55, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x69, 0x73, 0x12, 0x0e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x34, 0x55, 0x44, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73,
	0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x5a, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_his_proto_rawDescOnce sync.Once
	file_his_proto_rawDescData = file_his_proto_rawDesc
)

func file_his_proto_rawDescGZIP() []byte {
	file_his_proto_rawDescOnce.Do(func() {
		file_his_proto_rawDescData = protoimpl.X.CompressGZIP(file_his_proto_rawDescData)
	})
	return file_his_proto_rawDescData
}

var file_his_proto_msgTypes = make([]protoimpl.MessageInfo, 47)
var file_his_proto_goTypes = []interface{}{
	(*Request)(nil),                              // 0: proto.Request
	(*ServiceListRequest)(nil),                   // 1: proto.ServiceListRequest
	(*VisitRequest)(nil),                         // 2: proto.VisitRequest
	(*DateserveRequest)(nil),                     // 3: proto.DateserveRequest
	(*HospcodeRequest)(nil),                      // 4: proto.HospcodeRequest
	(*TokenRequest)(nil),                         // 5: proto.TokenRequest
	(*ProviderRequest)(nil),                      // 6: proto.ProviderRequest
	(*ListDoctorResponse)(nil),                   // 7: proto.ListDoctorResponse
	(*HisProviderResponse)(nil),                  // 8: proto.HisProviderResponse
	(*ListClinicResponse)(nil),                   // 9: proto.ListClinicResponse
	(*InfoResponse)(nil),                         // 10: proto.InfoResponse
	(*OPDDrugResponse)(nil),                      // 11: proto.OPDDrugResponse
	(*LabResponse)(nil),                          // 12: proto.LabResponse
	(*OPDDiagResponse)(nil),                      // 13: proto.OPDDiagResponse
	(*OPDProcedureResponse)(nil),                 // 14: proto.OPDProcedureResponse
	(*OPDScreenResponse)(nil),                    // 15: proto.OPDScreenResponse
	(*ServiceListResponse)(nil),                  // 16: proto.ServiceListResponse
	(*AppointmentResponse)(nil),                  // 17: proto.AppointmentResponse
	(*AppointmentDateserveResponse)(nil),         // 18: proto.AppointmentDateserveResponse
	(*ReferOutResponse)(nil),                     // 19: proto.ReferOutResponse
	(*TokenResponse)(nil),                        // 20: proto.TokenResponse
	(*CountResponse)(nil),                        // 21: proto.CountResponse
	(*H4UPersonalResponse)(nil),                  // 22: proto.H4UPersonalResponse
	(*H4UVisitResponse)(nil),                     // 23: proto.H4UVisitResponse
	(*H4ULabResponse)(nil),                       // 24: proto.H4ULabResponse
	(*H4UOrderResponse)(nil),                     // 25: proto.H4UOrderResponse
	(*H4UDiagnosisResponse)(nil),                 // 26: proto.H4UDiagnosisResponse
	(*ListDoctorResponse_Doctor)(nil),            // 27: proto.ListDoctorResponse.Doctor
	(*HisProviderResponse_HisProvider)(nil),      // 28: proto.HisProviderResponse.HisProvider
	(*ListClinicResponse_Clinic)(nil),            // 29: proto.ListClinicResponse.Clinic
	(*InfoResponse_Results)(nil),                 // 30: proto.InfoResponse.Results
	(*OPDDrugResponse_Results)(nil),              // 31: proto.OPDDrugResponse.Results
	(*LabResponse_Results)(nil),                  // 32: proto.LabResponse.Results
	(*OPDDiagResponse_Results)(nil),              // 33: proto.OPDDiagResponse.Results
	(*OPDProcedureResponse_Results)(nil),         // 34: proto.OPDProcedureResponse.Results
	(*OPDScreenResponse_Results)(nil),            // 35: proto.OPDScreenResponse.Results
	(*ServiceListResponse_Results)(nil),          // 36: proto.ServiceListResponse.Results
	(*AppointmentResponse_Results)(nil),          // 37: proto.AppointmentResponse.Results
	(*AppointmentDateserveResponse_Results)(nil), // 38: proto.AppointmentDateserveResponse.Results
	(*ReferOutResponse_Results)(nil),             // 39: proto.ReferOutResponse.Results
	(*TokenResponse_Results)(nil),                // 40: proto.TokenResponse.Results
	(*CountResponse_Results)(nil),                // 41: proto.CountResponse.Results
	(*H4UPersonalResponse_Results)(nil),          // 42: proto.H4UPersonalResponse.Results
	(*H4UVisitResponse_Results)(nil),             // 43: proto.H4UVisitResponse.Results
	(*H4ULabResponse_Results)(nil),               // 44: proto.H4ULabResponse.Results
	(*H4UOrderResponse_Results)(nil),             // 45: proto.H4UOrderResponse.Results
	(*H4UDiagnosisResponse_Results)(nil),         // 46: proto.H4UDiagnosisResponse.Results
}
var file_his_proto_depIdxs = []int32{
	27, // 0: proto.ListDoctorResponse.Results:type_name -> proto.ListDoctorResponse.Doctor
	28, // 1: proto.HisProviderResponse.Results:type_name -> proto.HisProviderResponse.HisProvider
	29, // 2: proto.ListClinicResponse.Results:type_name -> proto.ListClinicResponse.Clinic
	30, // 3: proto.InfoResponse.results:type_name -> proto.InfoResponse.Results
	31, // 4: proto.OPDDrugResponse.results:type_name -> proto.OPDDrugResponse.Results
	32, // 5: proto.LabResponse.results:type_name -> proto.LabResponse.Results
	33, // 6: proto.OPDDiagResponse.results:type_name -> proto.OPDDiagResponse.Results
	34, // 7: proto.OPDProcedureResponse.results:type_name -> proto.OPDProcedureResponse.Results
	35, // 8: proto.OPDScreenResponse.results:type_name -> proto.OPDScreenResponse.Results
	36, // 9: proto.ServiceListResponse.results:type_name -> proto.ServiceListResponse.Results
	37, // 10: proto.AppointmentResponse.results:type_name -> proto.AppointmentResponse.Results
	38, // 11: proto.AppointmentDateserveResponse.results:type_name -> proto.AppointmentDateserveResponse.Results
	39, // 12: proto.ReferOutResponse.results:type_name -> proto.ReferOutResponse.Results
	40, // 13: proto.TokenResponse.results:type_name -> proto.TokenResponse.Results
	41, // 14: proto.CountResponse.results:type_name -> proto.CountResponse.Results
	42, // 15: proto.H4UPersonalResponse.results:type_name -> proto.H4UPersonalResponse.Results
	43, // 16: proto.H4UVisitResponse.results:type_name -> proto.H4UVisitResponse.Results
	44, // 17: proto.H4ULabResponse.results:type_name -> proto.H4ULabResponse.Results
	45, // 18: proto.H4UOrderResponse.results:type_name -> proto.H4UOrderResponse.Results
	46, // 19: proto.H4UDiagnosisResponse.results:type_name -> proto.H4UDiagnosisResponse.Results
	0,  // 20: proto.EmrService.PatientInfo:input_type -> proto.Request
	1,  // 21: proto.EmrService.ServiceList:input_type -> proto.ServiceListRequest
	2,  // 22: proto.EmrService.OPDScreening:input_type -> proto.VisitRequest
	2,  // 23: proto.EmrService.OPDDiagnosis:input_type -> proto.VisitRequest
	2,  // 24: proto.EmrService.OPDProcedure:input_type -> proto.VisitRequest
	2,  // 25: proto.EmrService.OPDDrug:input_type -> proto.VisitRequest
	2,  // 26: proto.EmrService.Lab:input_type -> proto.VisitRequest
	0,  // 27: proto.EmrService.Appointment:input_type -> proto.Request
	0,  // 28: proto.EmrService.ReferOut:input_type -> proto.Request
	3,  // 29: proto.MhealthService.AppointmentDateserve:input_type -> proto.DateserveRequest
	4,  // 30: proto.MasterService.DoctorList:input_type -> proto.HospcodeRequest
	4,  // 31: proto.MasterService.ClinicList:input_type -> proto.HospcodeRequest
	4,  // 32: proto.MasterService.HisProviderList:input_type -> proto.HospcodeRequest
	6,  // 33: proto.MasterService.CountRecord:input_type -> proto.ProviderRequest
	5,  // 34: proto.AuthenService.Authen:input_type -> proto.TokenRequest
	0,  // 35: proto.H4UService.H4UPersonal:input_type -> proto.Request
	0,  // 36: proto.H4UService.H4UVisit:input_type -> proto.Request
	0,  // 37: proto.H4UService.H4ULab:input_type -> proto.Request
	0,  // 38: proto.H4UService.H4UOrder:input_type -> proto.Request
	0,  // 39: proto.H4UService.H4UDiagnosis:input_type -> proto.Request
	10, // 40: proto.EmrService.PatientInfo:output_type -> proto.InfoResponse
	16, // 41: proto.EmrService.ServiceList:output_type -> proto.ServiceListResponse
	15, // 42: proto.EmrService.OPDScreening:output_type -> proto.OPDScreenResponse
	13, // 43: proto.EmrService.OPDDiagnosis:output_type -> proto.OPDDiagResponse
	14, // 44: proto.EmrService.OPDProcedure:output_type -> proto.OPDProcedureResponse
	11, // 45: proto.EmrService.OPDDrug:output_type -> proto.OPDDrugResponse
	12, // 46: proto.EmrService.Lab:output_type -> proto.LabResponse
	17, // 47: proto.EmrService.Appointment:output_type -> proto.AppointmentResponse
	19, // 48: proto.EmrService.ReferOut:output_type -> proto.ReferOutResponse
	18, // 49: proto.MhealthService.AppointmentDateserve:output_type -> proto.AppointmentDateserveResponse
	7,  // 50: proto.MasterService.DoctorList:output_type -> proto.ListDoctorResponse
	9,  // 51: proto.MasterService.ClinicList:output_type -> proto.ListClinicResponse
	8,  // 52: proto.MasterService.HisProviderList:output_type -> proto.HisProviderResponse
	21, // 53: proto.MasterService.CountRecord:output_type -> proto.CountResponse
	20, // 54: proto.AuthenService.Authen:output_type -> proto.TokenResponse
	22, // 55: proto.H4UService.H4UPersonal:output_type -> proto.H4UPersonalResponse
	23, // 56: proto.H4UService.H4UVisit:output_type -> proto.H4UVisitResponse
	24, // 57: proto.H4UService.H4ULab:output_type -> proto.H4ULabResponse
	25, // 58: proto.H4UService.H4UOrder:output_type -> proto.H4UOrderResponse
	26, // 59: proto.H4UService.H4UDiagnosis:output_type -> proto.H4UDiagnosisResponse
	40, // [40:60] is the sub-list for method output_type
	20, // [20:40] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_his_proto_init() }
func file_his_proto_init() {
	if File_his_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_his_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VisitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateserveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HospcodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProviderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDoctorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HisProviderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDDrugResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDDiagResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDProcedureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDScreenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentDateserveResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferOutResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UPersonalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UVisitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4ULabResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UDiagnosisResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListDoctorResponse_Doctor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HisProviderResponse_HisProvider); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListClinicResponse_Clinic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDDrugResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LabResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDDiagResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDProcedureResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OPDScreenResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceListResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentDateserveResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReferOutResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TokenResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UPersonalResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UVisitResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4ULabResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UOrderResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_his_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*H4UDiagnosisResponse_Results); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_his_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   47,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_his_proto_goTypes,
		DependencyIndexes: file_his_proto_depIdxs,
		MessageInfos:      file_his_proto_msgTypes,
	}.Build()
	File_his_proto = out.File
	file_his_proto_rawDesc = nil
	file_his_proto_goTypes = nil
	file_his_proto_depIdxs = nil
}
