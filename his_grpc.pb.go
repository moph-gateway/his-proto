// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EmrServiceClient is the client API for EmrService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EmrServiceClient interface {
	PatientInfo(ctx context.Context, in *RequestCid, opts ...grpc.CallOption) (*InfoResponse, error)
	GetServices(ctx context.Context, in *RequestCid, opts ...grpc.CallOption) (*ServiceResponse, error)
	GetScreening(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*ScreeningResponse, error)
	GetDiagnosis(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*DiagnosisResponse, error)
	GetProcedure(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*ProcedureResponse, error)
	GetLab(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*LabResponse, error)
	GetVaccine(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*VaccineResponse, error)
	GetDrug(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*DrugResponse, error)
}

type emrServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEmrServiceClient(cc grpc.ClientConnInterface) EmrServiceClient {
	return &emrServiceClient{cc}
}

func (c *emrServiceClient) PatientInfo(ctx context.Context, in *RequestCid, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/PatientInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetServices(ctx context.Context, in *RequestCid, opts ...grpc.CallOption) (*ServiceResponse, error) {
	out := new(ServiceResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetScreening(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*ScreeningResponse, error) {
	out := new(ScreeningResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/GetScreening", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetDiagnosis(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*DiagnosisResponse, error) {
	out := new(DiagnosisResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/GetDiagnosis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetProcedure(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*ProcedureResponse, error) {
	out := new(ProcedureResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/GetProcedure", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetLab(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*LabResponse, error) {
	out := new(LabResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/GetLab", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetVaccine(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*VaccineResponse, error) {
	out := new(VaccineResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/GetVaccine", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emrServiceClient) GetDrug(ctx context.Context, in *RequestVisit, opts ...grpc.CallOption) (*DrugResponse, error) {
	out := new(DrugResponse)
	err := c.cc.Invoke(ctx, "/proto.EmrService/GetDrug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmrServiceServer is the server API for EmrService service.
// All implementations must embed UnimplementedEmrServiceServer
// for forward compatibility
type EmrServiceServer interface {
	PatientInfo(context.Context, *RequestCid) (*InfoResponse, error)
	GetServices(context.Context, *RequestCid) (*ServiceResponse, error)
	GetScreening(context.Context, *RequestVisit) (*ScreeningResponse, error)
	GetDiagnosis(context.Context, *RequestVisit) (*DiagnosisResponse, error)
	GetProcedure(context.Context, *RequestVisit) (*ProcedureResponse, error)
	GetLab(context.Context, *RequestVisit) (*LabResponse, error)
	GetVaccine(context.Context, *RequestVisit) (*VaccineResponse, error)
	GetDrug(context.Context, *RequestVisit) (*DrugResponse, error)
	mustEmbedUnimplementedEmrServiceServer()
}

// UnimplementedEmrServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEmrServiceServer struct {
}

func (UnimplementedEmrServiceServer) PatientInfo(context.Context, *RequestCid) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatientInfo not implemented")
}
func (UnimplementedEmrServiceServer) GetServices(context.Context, *RequestCid) (*ServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedEmrServiceServer) GetScreening(context.Context, *RequestVisit) (*ScreeningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScreening not implemented")
}
func (UnimplementedEmrServiceServer) GetDiagnosis(context.Context, *RequestVisit) (*DiagnosisResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDiagnosis not implemented")
}
func (UnimplementedEmrServiceServer) GetProcedure(context.Context, *RequestVisit) (*ProcedureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcedure not implemented")
}
func (UnimplementedEmrServiceServer) GetLab(context.Context, *RequestVisit) (*LabResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLab not implemented")
}
func (UnimplementedEmrServiceServer) GetVaccine(context.Context, *RequestVisit) (*VaccineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVaccine not implemented")
}
func (UnimplementedEmrServiceServer) GetDrug(context.Context, *RequestVisit) (*DrugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDrug not implemented")
}
func (UnimplementedEmrServiceServer) mustEmbedUnimplementedEmrServiceServer() {}

// UnsafeEmrServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EmrServiceServer will
// result in compilation errors.
type UnsafeEmrServiceServer interface {
	mustEmbedUnimplementedEmrServiceServer()
}

func RegisterEmrServiceServer(s grpc.ServiceRegistrar, srv EmrServiceServer) {
	s.RegisterService(&EmrService_ServiceDesc, srv)
}

func _EmrService_PatientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).PatientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/PatientInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).PatientInfo(ctx, req.(*RequestCid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetServices(ctx, req.(*RequestCid))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetScreening_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVisit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetScreening(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/GetScreening",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetScreening(ctx, req.(*RequestVisit))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetDiagnosis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVisit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetDiagnosis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/GetDiagnosis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetDiagnosis(ctx, req.(*RequestVisit))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetProcedure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVisit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetProcedure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/GetProcedure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetProcedure(ctx, req.(*RequestVisit))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetLab_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVisit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetLab(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/GetLab",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetLab(ctx, req.(*RequestVisit))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetVaccine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVisit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetVaccine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/GetVaccine",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetVaccine(ctx, req.(*RequestVisit))
	}
	return interceptor(ctx, in, info, handler)
}

func _EmrService_GetDrug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVisit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmrServiceServer).GetDrug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.EmrService/GetDrug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmrServiceServer).GetDrug(ctx, req.(*RequestVisit))
	}
	return interceptor(ctx, in, info, handler)
}

// EmrService_ServiceDesc is the grpc.ServiceDesc for EmrService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EmrService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.EmrService",
	HandlerType: (*EmrServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PatientInfo",
			Handler:    _EmrService_PatientInfo_Handler,
		},
		{
			MethodName: "GetServices",
			Handler:    _EmrService_GetServices_Handler,
		},
		{
			MethodName: "GetScreening",
			Handler:    _EmrService_GetScreening_Handler,
		},
		{
			MethodName: "GetDiagnosis",
			Handler:    _EmrService_GetDiagnosis_Handler,
		},
		{
			MethodName: "GetProcedure",
			Handler:    _EmrService_GetProcedure_Handler,
		},
		{
			MethodName: "GetLab",
			Handler:    _EmrService_GetLab_Handler,
		},
		{
			MethodName: "GetVaccine",
			Handler:    _EmrService_GetVaccine_Handler,
		},
		{
			MethodName: "GetDrug",
			Handler:    _EmrService_GetDrug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/his.proto",
}

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	DoctorList(ctx context.Context, in *RequestHospcode, opts ...grpc.CallOption) (*DoctorResponse, error)
	ClinicList(ctx context.Context, in *RequestHospcode, opts ...grpc.CallOption) (*ClinicResponse, error)
	HisProviderList(ctx context.Context, in *RequestHospcode, opts ...grpc.CallOption) (*HisProviderResponse, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) DoctorList(ctx context.Context, in *RequestHospcode, opts ...grpc.CallOption) (*DoctorResponse, error) {
	out := new(DoctorResponse)
	err := c.cc.Invoke(ctx, "/proto.MasterService/DoctorList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ClinicList(ctx context.Context, in *RequestHospcode, opts ...grpc.CallOption) (*ClinicResponse, error) {
	out := new(ClinicResponse)
	err := c.cc.Invoke(ctx, "/proto.MasterService/ClinicList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) HisProviderList(ctx context.Context, in *RequestHospcode, opts ...grpc.CallOption) (*HisProviderResponse, error) {
	out := new(HisProviderResponse)
	err := c.cc.Invoke(ctx, "/proto.MasterService/HisProviderList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations must embed UnimplementedMasterServiceServer
// for forward compatibility
type MasterServiceServer interface {
	DoctorList(context.Context, *RequestHospcode) (*DoctorResponse, error)
	ClinicList(context.Context, *RequestHospcode) (*ClinicResponse, error)
	HisProviderList(context.Context, *RequestHospcode) (*HisProviderResponse, error)
	mustEmbedUnimplementedMasterServiceServer()
}

// UnimplementedMasterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (UnimplementedMasterServiceServer) DoctorList(context.Context, *RequestHospcode) (*DoctorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoctorList not implemented")
}
func (UnimplementedMasterServiceServer) ClinicList(context.Context, *RequestHospcode) (*ClinicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClinicList not implemented")
}
func (UnimplementedMasterServiceServer) HisProviderList(context.Context, *RequestHospcode) (*HisProviderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HisProviderList not implemented")
}
func (UnimplementedMasterServiceServer) mustEmbedUnimplementedMasterServiceServer() {}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_DoctorList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHospcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DoctorList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MasterService/DoctorList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DoctorList(ctx, req.(*RequestHospcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ClinicList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHospcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ClinicList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MasterService/ClinicList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ClinicList(ctx, req.(*RequestHospcode))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_HisProviderList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestHospcode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).HisProviderList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MasterService/HisProviderList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).HisProviderList(ctx, req.(*RequestHospcode))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoctorList",
			Handler:    _MasterService_DoctorList_Handler,
		},
		{
			MethodName: "ClinicList",
			Handler:    _MasterService_ClinicList_Handler,
		},
		{
			MethodName: "HisProviderList",
			Handler:    _MasterService_HisProviderList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/his.proto",
}

// MHealthServiceClient is the client API for MHealthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MHealthServiceClient interface {
	GetAppointmentDateserve(ctx context.Context, in *RequestDateServe, opts ...grpc.CallOption) (*AppointmentResponse, error)
}

type mHealthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMHealthServiceClient(cc grpc.ClientConnInterface) MHealthServiceClient {
	return &mHealthServiceClient{cc}
}

func (c *mHealthServiceClient) GetAppointmentDateserve(ctx context.Context, in *RequestDateServe, opts ...grpc.CallOption) (*AppointmentResponse, error) {
	out := new(AppointmentResponse)
	err := c.cc.Invoke(ctx, "/proto.MHealthService/GetAppointmentDateserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MHealthServiceServer is the server API for MHealthService service.
// All implementations must embed UnimplementedMHealthServiceServer
// for forward compatibility
type MHealthServiceServer interface {
	GetAppointmentDateserve(context.Context, *RequestDateServe) (*AppointmentResponse, error)
	mustEmbedUnimplementedMHealthServiceServer()
}

// UnimplementedMHealthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMHealthServiceServer struct {
}

func (UnimplementedMHealthServiceServer) GetAppointmentDateserve(context.Context, *RequestDateServe) (*AppointmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAppointmentDateserve not implemented")
}
func (UnimplementedMHealthServiceServer) mustEmbedUnimplementedMHealthServiceServer() {}

// UnsafeMHealthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MHealthServiceServer will
// result in compilation errors.
type UnsafeMHealthServiceServer interface {
	mustEmbedUnimplementedMHealthServiceServer()
}

func RegisterMHealthServiceServer(s grpc.ServiceRegistrar, srv MHealthServiceServer) {
	s.RegisterService(&MHealthService_ServiceDesc, srv)
}

func _MHealthService_GetAppointmentDateserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestDateServe)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MHealthServiceServer).GetAppointmentDateserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.MHealthService/GetAppointmentDateserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MHealthServiceServer).GetAppointmentDateserve(ctx, req.(*RequestDateServe))
	}
	return interceptor(ctx, in, info, handler)
}

// MHealthService_ServiceDesc is the grpc.ServiceDesc for MHealthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MHealthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MHealthService",
	HandlerType: (*MHealthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAppointmentDateserve",
			Handler:    _MHealthService_GetAppointmentDateserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/his.proto",
}
